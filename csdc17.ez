/*_____________________________________________________________

Template for an EASEA evolutionary algorithm for easea v1.0.3
_______________________________________________________________*/

\User declarations : // This section is copied on top of the output file
#include <string>
#include <iostream>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <time.h>
#include <string>
#include <sstream>
#include <iostream>
#include <regex>
#define UNDEF "UNDEFINED"
#define PATH_TRACKS "tracks.csv"
#define TRACKS_NUMBER 12
#define SESSION_NUMBER_MAX 60

template<typename Out>
void split(const std::string &s, char delim, Out result) {
    std::stringstream ss;
    ss.str(s);
    std::string item;
    while (std::getline(ss, item, delim)) {
        *(result++) = item;
    }
}


std::vector<std::string> split(const std::string &s, char delim) {
    std::vector<std::string> elems;
    split(s, delim, std::back_inserter(elems));
    return elems;
}

template <typename T> 
const bool Contains( std::vector<T>& Vec, const T& Element ) 
{
    if (std::find(Vec.begin(), Vec.end(), Element) != Vec.end())
        return true;

    return false;
}
using namespace std;

enum PAPER_TYPE_ENUM {
	FULL_PAPER,
	POSTER,
	SHORT_PAPER
};

class Paper {
   public:
	int paperId;
	int trackId;
	int sessionId;
	int primaryAuthorId;
	int decision;
	int duration; // minutes
	
	string startingTime;
	string rank;
	string paperType;
	string paperTitle;
	string sessionTitle;
	string trackTitle;
	
	string utc;
	string primaryAuthor;
	string primaryAuthorCountry;
	string constraintDay1;
	string constraintDay2;
	string constraintDay3;
	
	string authors;
	
	
	void displayPaper(){
		cout << "----" << endl;
		cout << "Paper ID : " << paperId << endl;
		cout << "Paper Title : " << paperTitle << endl;
		cout << "E-Track ID : " << trackId << endl;
		cout << "E-Track Title : " << trackTitle << endl;
		cout << "E-Session ID : " << sessionId << endl;
		cout << "E-Session Title : " << sessionTitle << endl;
		cout << "Primary Author ID : " << primaryAuthorId << endl;
		cout << "Primary Author : " << primaryAuthor << endl;
		cout << "Primary Author's Country : " << primaryAuthorCountry << endl;
		cout << "Authors : " << authors << endl;
		cout << "Paper's type : " << paperType << endl;
		cout << "Duration : " << duration << endl;
		cout << "Decision : " << decision << endl;
		cout << "Starting time : " << startingTime << endl;
		cout << "Rank : " << rank << endl;
		cout << "UTC time : " << utc << endl;
		cout << "Constraint Day 1 : " << constraintDay1 << endl;
		cout << "Constraint Day 2 : " << constraintDay2 << endl;
		cout << "Constraint Day 3 : " << constraintDay3 << endl;
	};
	
	void computeDuration()
	{
		if(strcmp(paperType.c_str(), "Poster") == 0)
			duration = 5;
		else if(strcmp(paperType.c_str(), "Short paper") == 0)
			duration = 15;
		else if(strcmp(paperType.c_str(), "Plenary talk") == 0)
			duration = 60;
		else if(strcmp(paperType.c_str(), "Advanced Introduction invited talk") == 0)
			duration = 30;

			
	}
	
};

ifstream fPaper;

vector<Paper> papers;
\end

\User functions:
// Paper format :
// Paper ID|Paper Title|E-Track ID|E-Track Title|E-Session ID|E-Session Title|Primary Author ID|Primary Author|Primary Author's Country|Authors|Paper's type|Decision|Starting Time|Rank|UTC time|Times Constraints - Day 1|Times Constraints - Day 2|Times Constraints - Day 3
void readTracksFile(){
	
	cout << "[INFOS] Papers loading..." << endl;
	fPaper.open(PATH_TRACKS, ios::in);
	string line;
	int nb_records = 0;
	if (fPaper.is_open()) {
		Paper p;
		while ( getline (fPaper,line) ) {
			line.erase(line.length()-1,line.length()-1);
			char * cstr = new char [line.length()+1];
			strcpy (cstr, line.c_str());
			char *szKeywords, *szAbstKeywords;
			char * s;
			if(nb_records > 0)
			{
				s = strtok (cstr,"|");
				p.paperId = atoi(s) > 0 ? atoi(s):-1;
				s = strtok (NULL, "|"); p.paperTitle = s ? s : UNDEF;
				s = strtok (NULL, "|"); p.trackId = atoi(s);
				s = strtok (NULL, "|"); p.trackTitle = s ? s :UNDEF;
				s = strtok (NULL, "|"); p.sessionId = atoi(s) > 0 ? atoi(s):-1;
				s = strtok (NULL, "|"); p.sessionTitle = s ? s :UNDEF;
				s = strtok (NULL, "|"); p.primaryAuthorId = atoi(s) > 0 ? atoi(s):-1;
				s = strtok (NULL, "|"); p.primaryAuthor = s ? s :UNDEF;
				s = strtok (NULL, "|"); p.primaryAuthorCountry = s ? s :UNDEF;
				s = strtok (NULL, "|"); p.authors = s ? s :UNDEF;
				s = strtok (NULL, "|"); p.paperType = s ? s :UNDEF;
				s = strtok (NULL, "|"); p.decision = s ? atoi(s) : 0;
				s = strtok (NULL, "|"); p.startingTime = s ? s :UNDEF;
				s = strtok (NULL, "|"); p.rank = s ? s :UNDEF;
				s = strtok (NULL, "|"); p.utc = s ? s :UNDEF;				
				s = strtok (NULL, "|"); p.constraintDay1 = s ? s :UNDEF;
				s = strtok (NULL, "|"); p.constraintDay2 = s ? s :UNDEF;
				s = strtok (NULL, "|"); p.constraintDay3 = s ? s : UNDEF;	
						
				p.computeDuration();
				papers.push_back(p);		

			}
			nb_records++;
		}
	}
	fPaper.close();
	cout << "[INFOS] (" << papers.size() << ") papers loaded!" << endl;
} 

vector<Paper> getPapersForTrackId(int id)
{
	vector<Paper> data;
	for (int i=0;i<papers.size();i++){
		if(papers[i].trackId == id)
			data.push_back(papers[i]);
	}
	return data;
}

vector<int> getSessionForTrackId(int id)
{
	vector<int> data;
	for (int i=0;i<papers.size();i++){
		if(papers[i].trackId == id && !Contains(data, papers[i].sessionId))
			data.push_back(papers[i].sessionId);
	}
	return data;
}
vector<Paper> getSessionPaperForTrackId(int id, int sess)
{
	vector<Paper> data;
	for (int i=0;i<papers.size();i++){
		if(papers[i].trackId == id && papers[i].sessionId == sess)
			data.push_back(papers[i]);
	}
	return data;
}

Paper getPaperById(int id)
{
	Paper data;
	for (int i=0;i<papers.size();i++){
		if(papers[i].paperId == id){
			data = papers[i];
			break;
		}
	}
	return data;
}

time_t getRandomDate(){
	struct tm info;
	info.tm_year = 2015 - 1900;
	info.tm_mon = 8;
	info.tm_mday = random(1,4);
	info.tm_hour = random(0,24);
	info.tm_min = random(0,59);
	info.tm_sec = 0;
	info.tm_isdst = -1;
	time_t time = mktime(&info);
	
	return time;
}

bool checkDateConstraint(time_t start, Paper p){
	
	bool result = false;
	struct tm *aTime = localtime(&start);	
	int day = aTime->tm_mday;
	int hr_start = aTime->tm_hour;
	string constraintArray = "UNDEF";
	if(day == 1 && p.constraintDay1 != "UNDEF")
		constraintArray = p.constraintDay1;	
	else if(day == 2 && p.constraintDay2 != "UNDEF")
		constraintArray = p.constraintDay2;	
	else if(day == 3 && p.constraintDay3 != "UNDEF")
		constraintArray = p.constraintDay3;
			
	if(constraintArray != "UNDEF")
	{
		constraintArray.erase(remove(constraintArray.begin(), constraintArray.end(), '['), constraintArray.end());
		constraintArray.erase(remove(constraintArray.begin(), constraintArray.end(), ']'), constraintArray.end());
		vector<string> hoursRange = split(constraintArray, ',');
		
		int val = 0;
		for(int k = 0; k < hoursRange.size() / 2; k++)
		{
			int minHour = stoi(hoursRange[(k+val)%hoursRange.size()]);
			int maxHour = stoi(hoursRange[(k+val+1)%hoursRange.size()]);
			if(hr_start > minHour && hr_start < maxHour){
				result = true;
				break;
			}
			else
				result = false;
			val++;
		}
		
	}
	else
		result = true;
		
	return result;
			
}

\end

\User CUDA:
//Transfert some variables to GPU here (cudaMalloc, MemCpy)
\end

\User classes :

Adn {
	int paperId;
	int sessionId;	
	int position;	
	double startingTime;
	double score;
}

Element {
	int trackId;
	int size;
	Adn adn[SESSION_NUMBER_MAX];
}

GenomeClass { 
  // need to declare the genome here
  int i;
  Element track[TRACKS_NUMBER];
}
\end

\Before everything else function:
//cout<<"Before everything else function called "<<endl;
readTracksFile();
\end

\After everything else function:
for(int j = 5; j < 6; j++)
	for(int i = 0; i < bBest->track[j].size; i++)
	{
		time_t date = bBest->track[j].adn[i].startingTime;
		cout << bBest->track[j].trackId << " " << bBest->track[j].adn[i].sessionId << " " << ctime(&date) << " "  << endl;
		Paper p = getPaperById(bBest->track[j].adn[i].paperId);
		cout << p.constraintDay1 << "|" << p.constraintDay2 << "|" << p.constraintDay3 << endl;
	}
\end

\At the beginning of each generation function:
//cout << "At the beginning of each generation function called" << endl;
\end

\At the end of each generation function:
//cout << "At the end of each generation function called" << endl;
\end

\At each generation before reduce function:
//cout << "At each generation before replacement function called" << endl;
\end

\GenomeClass::display:
cout << endl ;
for(int j = 5; j < 6; j++)
	for(int i = 0; i < Genome.track[j].size; i++)
	{
		time_t date = Genome.track[j].adn[i].startingTime;
		cout << Genome.track[j].trackId << " " << Genome.track[j].adn[i].sessionId << " " << ctime(&date) << " " << Genome.track[j].adn[i].position << endl;
		Paper p = getPaperById(Genome.track[j].adn[i].paperId);
		cout << p.constraintDay1 << "|" << p.constraintDay2 << "|" << p.constraintDay3 << endl;
	}
\end

\GenomeClass::initialiser : // "initializer" is also accepted
  // the genome to initialise is known as "Genome"
  	for(int trackId = 5; trackId < 6; trackId++)
  	{
		vector<Paper> paperData = getPapersForTrackId(trackId);
		Element e;
		e.size = paperData.size();
		for(int i = 0; i < paperData.size(); i++){			
			Paper p = paperData[i];			
			e.trackId = p.trackId;
			e.adn[i].paperId = p.paperId;
			e.adn[i].sessionId = p.sessionId;
			e.adn[i].startingTime = getRandomDate();	
			e.adn[i].position = i;
		}
		
		// positions assignment
		std::sort(e.adn, e.adn + e.size -1, [](Adn& a, Adn& b)
		{
		  return a.startingTime < b.startingTime; 		
		});
		for(int i = 0; i < e.size; i++){			
			e.adn[i].position = i+1;
		}
		
		Genome.track[trackId] = e;

	}
	
\end

\GenomeClass::crossover : 
  // must create "child" out of "parent1" and "parent2"
  for(int trackId = 5; trackId < 6 ; trackId++){
	for(int k = 0; k < parent1.track[trackId].size; k++){
		if(k%2 == 0)
			child.track[trackId].adn[k] = parent1.track[trackId].adn[k];
		else
			child.track[trackId].adn[k] = parent2.track[trackId].adn[k];
	}
	// positions assignment
	std::sort(child.track[trackId].adn, child.track[trackId].adn + child.track[trackId].size -1, [](Adn& a, Adn& b)
	{
	  return a.startingTime < b.startingTime; 		
	});
	
	for(int i = 0; i < child.track[trackId].size; i++){			
		child.track[trackId].adn[i].position = i+1;
	}
	
  }
\end

\GenomeClass::mutator : // Must return the number of mutations
  // must mutate "Genome"
  return 0;
\end

\GenomeClass::evaluator : // Returns the score as a real value
	// uses Genome to evaluate the quality of the individual
	double score = 0.0;
  
	// Evaluation des contraintes pour chaque tracks
	for(int j = 5; j < 6; j++){
		Element e = Genome.track[j];
		for(int i = 0;i < e.size; i++){
			Adn adn = e.adn[i];
			Paper p = getPaperById(adn.paperId);	
			time_t start = adn.startingTime;
			bool resDayConstraint = checkDateConstraint(start, p);
			// evaluation des contraintes d'heures
			// TODO : verif TIME ZONE
			resDayConstraint ? score+=100 : score-=1000;
						
			time_t end = start + (time_t)p.duration*60;

			for(int pId = 0; pId < e.size; pId++){
				Adn otherAdn = e.adn[pId];
				Paper otherPaper = getPaperById(otherAdn.paperId);	
				time_t startOtherPaper = (time_t)otherAdn.startingTime;
				time_t endOtherPaper = startOtherPaper + (time_t)otherPaper.duration * 60;
				
				// personne ne parle en mm temps au sein de la mm session
				if(otherAdn.paperId != adn.paperId && otherAdn.sessionId == adn.sessionId)
				{				
					if((start <= endOtherPaper) && (startOtherPaper <= start)){
						score -= 10000;
					}else{
						score += 100;
					}
				}
				
				// eviter de parallelliser les sessions d'une meme track
				if(otherAdn.paperId != adn.paperId && otherAdn.sessionId != adn.sessionId)
				{					
					if((start <= endOtherPaper) && (startOtherPaper <= start)){
						score -= 100;
					}else{
						score += 100;
					}
				}
			}
			
			
		}
						
	}
	
		
	
  return score;
\end

\User Makefile options: 
CXXFLAGS= -std=c++11 -fopenmp    -O2 -g -Wall -fmessage-length=0 -I$(csdc17LIB_PATH)include -I$(EZ_PATH)boost
\end

\Default run parameters :        // Please let the parameters appear in this order
  Number of generations : 100    // NB_GEN
  Time limit: 0 			           // In seconds, 0 to deactivate
  Population size : 1000	   //POP_SIZE
  Offspring size : 1024 // or a xx%
  Mutation probability : 1       // MUT_PROB
  Crossover probability : 1      // XOVER_PROB
  Evaluator goal : maximize      // maximise
  Selection operator: Tournament 2.0
  Surviving parents: 100%        // Percentage or absolute  
  Surviving offspring: 100%      // Percentage or absolute  
  Reduce parents operator: Tournament 2
  Reduce offspring operator: Tournament 2
  Final reduce operator: Tournament 2

  Elitism: Strong			           // Weak or Strong
  Elite: 1
  Print stats: true				       // Default: 1
  Generate csv stats file:false			
  Generate gnuplot script:false
  Generate R script:false
  Plot stats:true				         // Default: 0

  Remote island model: false
  IP file: ip.txt 			         // List of IP:PORT of islands to send individuals to
  Migration probability: 0.33    // Probability of sending an individual per generation
  Server port : 2929

  Save population: false
  Start from file:false
\end
